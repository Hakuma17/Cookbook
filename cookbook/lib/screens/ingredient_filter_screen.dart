// lib/screens/ingredient_filter_screen.dart
//
//   ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏° + ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ ‚òÖ NEW)
// ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ:
// - ‚òÖ NEW ‡πÉ‡∏™‡πà key ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ TypeAhead ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ instance ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î (‡∏Å‡∏±‡∏ô overlay/handler ‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á)
// - ‚òÖ NEW ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ onSelected ‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå controller ‡πÅ‡∏ô‡πà ‡πÜ ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÇ‡∏ü‡∏Å‡∏±‡∏™ (‡∏•‡∏î‡πÄ‡∏Ñ‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢)
// - ‚òÖ NEW ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô onSelectionChanged ‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÇ‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î/overlay ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö
// - ‚òÖ NEW ‡πÉ‡∏ô _addGroupTo() ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡∏∏‡∏î "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏Å‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ö‡∏™‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
// - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á ‚Äú‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‚Äù (initialIncludeGroups/initialExcludeGroups)

import 'package:flutter/material.dart';
import 'package:flutter_typeahead/flutter_typeahead.dart';
import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';

import 'package:cookbook/services/api_service.dart';
import 'package:cookbook/services/auth_service.dart';
import 'package:cookbook/widgets/custom_bottom_nav.dart';

import 'ingredient_photo_screen.dart' show scanIngredient;

/// ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
/// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:
///  - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" (categorynew) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πá‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô
///  - ‡∏Ñ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (2 ‡∏ä‡∏∏‡∏î: include/exclude) ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 2 ‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
///    ‡∏£‡∏π‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: [includeNames, excludeNames, includeGroups, excludeGroups]
///    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô index 0‚Äì1 ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
class IngredientFilterScreen extends StatefulWidget {
  final List<String>? initialInclude;
  final List<String>? initialExclude;
  final List<String>? initialIngredients;
  final List<String>? initialIncludeGroups; // ‚Üê ‡πÉ‡∏´‡∏°‡πà
  final List<String>? initialExcludeGroups; // ‚Üê ‡πÉ‡∏´‡∏°‡πà

  const IngredientFilterScreen({
    super.key,
    this.initialInclude,
    this.initialExclude,
    this.initialIngredients,
    this.initialIncludeGroups,
    this.initialExcludeGroups,
  });

  @override
  State<IngredientFilterScreen> createState() => _IngredientFilterScreenState();
}

class _IngredientFilterScreenState extends State<IngredientFilterScreen> {
  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ State ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  /// ‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"
  final Set<String> _haveSet = {};
  final Set<String> _notHaveSet = {};

  /// ‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏∏‡πâ‡∏á‡∏ó‡∏∞‡πÄ‡∏•, ‡∏ô‡∏°‡∏ß‡∏±‡∏ß, ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß ‡∏Ø‡∏•‡∏Ø)
  final Set<String> _haveGroupSet = {};
  final Set<String> _notHaveGroupSet = {};

  /// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏û‡πâ (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
  final Set<String> _allergySet = {};

  bool _isLoggedIn = false;

  /// ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"
  final _haveCtrl = TextEditingController();
  final _notHaveCtrl = TextEditingController();
  final _haveFocus = FocusNode();
  final _notHaveFocus = FocusNode();

  /// ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" (‡πÉ‡∏ä‡πâ controller ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏õ‡∏∞‡∏õ‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏ä‡∏∑‡πà‡∏≠)
  final _haveGroupCtrl = TextEditingController();
  final _notHaveGroupCtrl = TextEditingController();
  final _haveGroupFocus = FocusNode();
  final _notHaveGroupFocus = FocusNode();

  late final Future<void> _initFuture;

  /// ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: true = ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö, false = ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  bool _groupMode = false;

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Lifecycle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  @override
  void initState() {
    super.initState();
    _initFuture = _initialize();
  }

  @override
  void dispose() {
    _haveCtrl.dispose();
    _notHaveCtrl.dispose();
    _haveFocus.dispose();
    _notHaveFocus.dispose();

    _haveGroupCtrl.dispose();
    _notHaveGroupCtrl.dispose();
    _haveGroupFocus.dispose();
    _notHaveGroupFocus.dispose();
    super.dispose();
  }

  Future<void> _initialize() async {
    // ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö)
    if (widget.initialInclude != null) {
      _haveSet.addAll(widget.initialInclude!
          .map((e) => e.trim())
          .where((e) => e.isNotEmpty));
    } else if (widget.initialIngredients != null) {
      _haveSet.addAll(widget.initialIngredients!
          .map((e) => e.trim())
          .where((e) => e.isNotEmpty));
    }
    if (widget.initialIncludeGroups != null) {
      _haveGroupSet.addAll(widget.initialIncludeGroups!
          .map((e) => e.trim())
          .where((e) => e.isNotEmpty));
    }
    if (widget.initialExcludeGroups != null) {
      _notHaveGroupSet.addAll(widget.initialExcludeGroups!
          .map((e) => e.trim())
          .where((e) => e.isNotEmpty));
    }

    if (widget.initialExclude != null) {
      _notHaveSet.addAll(widget.initialExclude!
          .map((e) => e.trim())
          .where((e) => e.isNotEmpty));
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô + ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    final results = await Future.wait([
      AuthService.isLoggedIn(),
      AuthService.getUserAllergies(), // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏ô List<String> ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
    ]);

    if (!mounted) return;
    setState(() {
      _isLoggedIn = results[0] as bool;
      final allergyList = results[1] as List<String>;
      _allergySet
        ..clear()
        ..addAll(allergyList.map((e) => e.trim()).where((e) => e.isNotEmpty));
    });
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  // normalize ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏•‡πá‡∏Å
  String _norm(String s) => s.trim().toLowerCase();

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ä‡∏∏‡∏î "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ + ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö case-insensitive
  void _addNameTo(Set<String> target, Set<String> opposite, String raw) {
    print(
        'üîç _addNameTo called with: "$raw" (‡πÇ‡∏´‡∏°‡∏î: ${_groupMode ? "‡∏Å‡∏•‡∏∏‡πà‡∏°" : "‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"})');

    final names = raw
        .split(RegExp(r'[;,]')) // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ;
        .map((e) => e.trim())
        .where((e) => e.isNotEmpty);

    bool changed = false;

    for (final name in names) {
      final key = _norm(name);
      print('   ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: "$name"');

      // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå)
      final toRemove = opposite.firstWhere(
        (e) => _norm(e) == key,
        orElse: () => '',
      );
      if (toRemove.isNotEmpty) {
        print('   ‚Üí ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°: "$toRemove"');
        opposite.remove(toRemove);
        changed = true;
      }

      // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÉ‡∏ô target (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå)
      final exists = target.any((e) => _norm(e) == key);
      if (!exists) {
        target.add(name);
        changed = true;
        print('   ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß: "$name"');
      } else {
        print('   ‚ö†Ô∏è ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: "$name"');
      }
    }

    if (changed) setState(() {});
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ä‡∏∏‡∏î "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" (‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)
  void _addGroupTo(Set<String> target, Set<String> opposite, String raw) {
    print(
        'üè∑Ô∏è _addGroupTo called with: "$raw" (‡πÇ‡∏´‡∏°‡∏î: ${_groupMode ? "‡∏Å‡∏•‡∏∏‡πà‡∏°" : "‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"})');

    final groups = raw
        .split(RegExp(r'[;,]'))
        .map((e) => e.trim())
        .where((e) => e.isNotEmpty);

    bool changed = false;

    for (final g in groups) {
      final key = _norm(g);
      print('   ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°: "$g"');

      // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
      final toRemove = opposite.firstWhere(
        (e) => _norm(e) == key,
        orElse: () => '',
      );
      if (toRemove.isNotEmpty) {
        print('   ‚Üí ‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°: "$toRemove"');
        opposite.remove(toRemove);
        changed = true;
      }

      // ‚òÖ REMOVED: ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏≠‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á 2 ‡πÅ‡∏ö‡∏ö
      // ‡πÄ‡∏î‡∏¥‡∏°: ‡∏•‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° -> ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ö‡∏™‡∏ô

      // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÉ‡∏ô target (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå)
      final exists = target.any((e) => _norm(e) == key);
      if (!exists) {
        target.add(g);
        changed = true;
        print('   ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß: "$g"');
      } else {
        print('   ‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: "$g"');
      }
    }

    if (changed) setState(() {});
  }

  void _removeFrom(Set<String> set, String name) {
    set.removeWhere((e) => _norm(e) == _norm(name));
    setState(() {});
  }

  void _clearAll() => setState(() {
        _haveSet.clear();
        _notHaveSet.clear();
        _haveGroupSet.clear();
        _notHaveGroupSet.clear();
      });

  /// ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤  ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  void _popWithResult() {
    // [OLD] ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏Ñ‡πà 2 ‡∏ä‡∏∏‡∏î: [_haveSet.toList(), _notHaveSet.toList()]
    // Navigator.pop(context, [_haveSet.toList(), _notHaveSet.toList()]);

    // [NEW] ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö 4 ‡∏ä‡∏∏‡∏î: includeNames, excludeNames, includeGroups, excludeGroups
    // ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô index 0‚Äì1 ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    // ‚òÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô use_build_context_synchronously: ‡∏à‡∏±‡∏ö Navigator ‡∏Å‡πà‡∏≠‡∏ô
    final nav = Navigator.of(context);
    nav.pop([
      _haveSet.toList(),
      _notHaveSet.toList(),
      _haveGroupSet.toList(),
      _notHaveGroupSet.toList(),
    ]);
  }

  // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á
  void _onNavItemTapped(int index) {
    if (index == 1) return; // ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    // ‚òÖ ‡πÉ‡∏ä‡πâ nav ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    final nav = Navigator.of(context);
    switch (index) {
      case 0:
        nav.pushNamedAndRemoveUntil('/home', (_) => false);
        break;
      case 2:
        nav.pushNamedAndRemoveUntil('/my_recipes', (_) => false);
        break;
      case 3:
        final route = _isLoggedIn ? '/profile' : '/settings';
        nav.pushNamedAndRemoveUntil(route, (_) => false);
        break;
    }
  }

  /// ‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ ‡πÅ‡∏ï‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô "‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö)
  bool get _hasAllergyConflict {
    final lowers = _haveSet.map(_norm).toSet();
    return _allergySet.any((a) => lowers.contains(_norm(a)));
  }

  void _dismissKb() {
    // ‡∏õ‡∏¥‡∏î focus nodes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    _haveFocus.unfocus();
    _notHaveFocus.unfocus();
    _haveGroupFocus.unfocus();
    _notHaveGroupFocus.unfocus();

    // ‡∏õ‡∏¥‡∏î keyboard ‡πÉ‡∏ô context ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    FocusScope.of(context).unfocus();
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Camera handlers (4 ‡∏ä‡πà‡∏≠‡∏á) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  // ‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡πÇ‡∏´‡∏°‡∏î "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á include
  Future<void> _onIncludeNameCamera() async {
    final names = await scanIngredient(context);
    if (names.isEmpty) return;
    _addNameTo(_haveSet, _notHaveSet, names.join(','));
    if (!mounted) return;
    // ‚òÖ ‡∏à‡∏±‡∏ö messenger ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
    final messenger = ScaffoldMessenger.of(context);
    messenger.showSnackBar(
      SnackBar(content: Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô: ${names.join(", ")}')),
    );
  }

  // ‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡πÇ‡∏´‡∏°‡∏î "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á exclude
  Future<void> _onExcludeNameCamera() async {
    final names = await scanIngredient(context);
    if (names.isEmpty) return;
    _addNameTo(_notHaveSet, _haveSet, names.join(','));
    if (!mounted) return;
    final messenger = ScaffoldMessenger.of(context);
    messenger.showSnackBar(
      SnackBar(content: Text('‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô: ${names.join(", ")}')),
    );
  }

  // ‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡πÇ‡∏´‡∏°‡∏î "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‚Üí ‡∏™‡πÅ‡∏Å‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‚Üí map ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á include
  Future<void> _onIncludeGroupCamera() async {
    final names = await scanIngredient(context);
    if (names.isEmpty) return;
    try {
      final groups = await ApiService.mapIngredientsToGroups(names);
      if (groups.isNotEmpty) {
        _addGroupTo(_haveGroupSet, _notHaveGroupSet, groups.join(','));
        if (!mounted) return;
        final messenger = ScaffoldMessenger.of(context);
        messenger.showSnackBar(
          SnackBar(content: Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°: ${groups.join(", ")}')),
        );
      } else {
        if (!mounted) return;
        final messenger = ScaffoldMessenger.of(context);
        messenger.showSnackBar(
          const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô')),
        );
      }
    } catch (e) {
      if (!mounted) return;
      final messenger = ScaffoldMessenger.of(context);
      messenger.showSnackBar(
        SnackBar(content: Text('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
      );
    }
  }

  // ‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡πÇ‡∏´‡∏°‡∏î "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‚Üí ‡∏™‡πÅ‡∏Å‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‚Üí map ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á exclude
  Future<void> _onExcludeGroupCamera() async {
    final names = await scanIngredient(context);
    if (names.isEmpty) return;
    try {
      final groups = await ApiService.mapIngredientsToGroups(names);
      if (groups.isNotEmpty) {
        _addGroupTo(_notHaveGroupSet, _haveGroupSet, groups.join(','));
        if (!mounted) return;
        final messenger = ScaffoldMessenger.of(context);
        messenger.showSnackBar(
          SnackBar(content: Text('‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°: ${groups.join(", ")}')),
        );
      } else {
        if (!mounted) return;
        final messenger = ScaffoldMessenger.of(context);
        messenger.showSnackBar(
          const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô')),
        );
      }
    } catch (e) {
      if (!mounted) return;
      final messenger = ScaffoldMessenger.of(context);
      messenger.showSnackBar(
        SnackBar(content: Text('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
      );
    }
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Help sheet ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  void _showHelpSheet({required bool isGroupMode}) {
    showModalBottomSheet(
      context: context,
      showDragHandle: true,
      isScrollControlled: true,
      builder: (ctx) {
        final theme = Theme.of(ctx);
        final t = theme.textTheme;
        final cs = theme.colorScheme;

        return Container(
          constraints: BoxConstraints(
            maxHeight: MediaQuery.of(ctx).size.height * 0.8,
          ),
          child: SingleChildScrollView(
            padding: const EdgeInsets.fromLTRB(20, 12, 20, 24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
                Row(
                  children: [
                    Icon(Icons.help_outline, color: cs.primary, size: 28),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö',
                        style: t.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: cs.primary,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),

                // ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: cs.primaryContainer.withOpacity(0.5),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            isGroupMode ? Icons.category : Icons.inventory_2,
                            color: cs.onPrimaryContainer,
                            size: 20,
                          ),
                          const SizedBox(width: 8),
                          Text(
                            '‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${isGroupMode ? "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" : "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"}',
                            style: t.titleMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: cs.onPrimaryContainer,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        isGroupMode
                            ? '‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ ‚Äú‡∏Å‡∏•‡∏∏‡πà‡∏°‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô'
                            : '‡πÇ‡∏´‡∏°‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π',
                        style: t.bodyMedium
                            ?.copyWith(color: cs.onPrimaryContainer),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),

                // ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
                Row(
                  children: [
                    Icon(Icons.tune, color: cs.secondary),
                    const SizedBox(width: 8),
                    Text('‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ',
                        style: t.titleMedium
                            ?.copyWith(fontWeight: FontWeight.w600)),
                  ],
                ),
                const SizedBox(height: 8),
                const _HelpBullet(
                    '‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà ‚Äú‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‚Äù'),
                const _HelpBullet(
                    '‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏´‡∏°‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡πÅ‡∏•‡∏∞ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö'),
                const _HelpBullet(
                    '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡∏ä‡∏¥‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏° √ó'),
                const SizedBox(height: 16),

                // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                Row(
                  children: [
                    Icon(Icons.keyboard, color: cs.secondary),
                    const SizedBox(width: 8),
                    Text('‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á',
                        style: t.titleMedium
                            ?.copyWith(fontWeight: FontWeight.w600)),
                  ],
                ),
                const SizedBox(height: 8),
                Text(
                  isGroupMode
                      ? '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏ô‡∏°‡∏ß‡∏±‡∏ß, ‡∏û‡∏£‡∏¥‡∏Å, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•‚Äù (‡πÉ‡∏™‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡∏´‡∏£‡∏∑‡∏≠ ;)'
                      : '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡πÉ‡∏ö‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤, ‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°, ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ‚Äù (‡πÉ‡∏™‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡∏´‡∏£‡∏∑‡∏≠ ;)',
                  style: t.bodyMedium,
                ),
                const SizedBox(height: 6),
                const _HelpBullet(
                    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î'),
                const _HelpBullet('‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå'),
                if (!isGroupMode)
                  const _HelpBullet(
                      '‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ‚Äú‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ‚Äù ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ'),
                const SizedBox(height: 12),

                // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
                Builder(
                  builder: (_) {
                    final samples = isGroupMode
                        ? ['‡∏ô‡∏°‡∏ß‡∏±‡∏ß', '‡∏û‡∏£‡∏¥‡∏Å', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢']
                        : ['‡πÉ‡∏ö‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤', '‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°', '‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ', '‡∏Ç‡πà‡∏≤'];
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
                            style: t.titleSmall
                                ?.copyWith(color: cs.onSurfaceVariant)),
                        const SizedBox(height: 8),
                        Wrap(
                          spacing: 8,
                          runSpacing: 6,
                          children: samples
                              .map((s) => Chip(
                                    label: Text(s),
                                    side: BorderSide(color: cs.outlineVariant),
                                    backgroundColor: cs.surfaceContainerHighest
                                        .withValues(alpha: .3),
                                  ))
                              .toList(),
                        ),
                      ],
                    );
                  },
                ),

                const SizedBox(height: 16),
                Divider(color: cs.outlineVariant),
                const SizedBox(height: 12),

                // ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                Row(
                  children: [
                    Icon(Icons.info_outline, color: cs.secondary),
                    const SizedBox(width: 8),
                    Text('‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ',
                        style: t.titleMedium
                            ?.copyWith(fontWeight: FontWeight.w600)),
                  ],
                ),
                const SizedBox(height: 8),
                const _HelpBullet('‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (?) ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ô‡∏µ‡πâ'),
                const _HelpBullet(
                    '‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß (‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á)'),
                const _HelpBullet(
                    '‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‚Äù ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'),
                const SizedBox(height: 20),

                // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
                SizedBox(
                  width: double.infinity,
                  child: FilledButton.icon(
                    onPressed: () => Navigator.pop(ctx),
                    icon: const Icon(Icons.check),
                    label: const Text('‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß'),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Build ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°
    final totalFilters = _haveSet.length +
        _notHaveSet.length +
        _haveGroupSet.length +
        _notHaveGroupSet.length;

    // ‡πÉ‡∏ä‡πâ WillPopScope ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î back ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    return WillPopScope(
      onWillPop: () async {
        _popWithResult();
        return false;
      },
      child: Scaffold(
        backgroundColor: theme.colorScheme.surface,
        resizeToAvoidBottomInset:
            true, // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡∏∂‡πâ‡∏ô
        extendBody: true, // ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà body ‡πÑ‡∏õ‡∏¢‡∏±‡∏á bottom navigation
        appBar: AppBar(
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: _popWithResult,
            tooltip: '‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á',
          ),
          title: const Text('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö'),
        ),
        bottomNavigationBar: KeyboardVisibilityBuilder(
          builder: (context, isKeyboardVisible) {
            // ‡∏ã‡πà‡∏≠‡∏ô bottom navigation bar ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡∏∂‡πâ‡∏ô
            return AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              height: isKeyboardVisible ? 0 : null,
              child: isKeyboardVisible
                  ? const SizedBox()
                  : CustomBottomNav(
                      selectedIndex: 1,
                      onItemSelected: _onNavItemTapped,
                      isLoggedIn: _isLoggedIn,
                    ),
            );
          },
        ),
        body: FutureBuilder(
          future: _initFuture,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }

            return SafeArea(
              child: GestureDetector(
                onTap: _dismissKb,
                behavior: HitTestBehavior.translucent,
                child: SingleChildScrollView(
                  keyboardDismissBehavior:
                      ScrollViewKeyboardDismissBehavior.onDrag,
                  padding: EdgeInsets.only(
                    left: 20.0,
                    right: 20.0,
                    top: 20.0,
                    bottom: MediaQuery.of(context).viewInsets.bottom +
                        80.0, // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding bottom ‡πÄ‡∏¢‡∏≠‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // ‡πÅ‡∏ñ‡∏ö‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
                      _buildModeSwitcher(theme),

                      const SizedBox(height: 12),
                      if (_hasAllergyConflict)
                        Padding(
                          padding: const EdgeInsets.only(bottom: 8),
                          child: MaterialBanner(
                            backgroundColor: theme.colorScheme.tertiaryContainer
                                .withValues(alpha: .3),
                            content: const Text(
                                '‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Äú‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‚Äù'),
                            actions: [
                              TextButton(
                                onPressed: () {},
                                child: const Text('‡∏õ‡∏¥‡∏î'),
                              ),
                            ],
                          ),
                        ),

                      // --- Section: "‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ---
                      Row(
                        children: [
                          Text('‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ:',
                              style: textTheme.titleMedium
                                  ?.copyWith(fontWeight: FontWeight.bold)),
                          const SizedBox(width: 8),
                          IconButton(
                            tooltip: '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å',
                            icon: const Icon(Icons.help_outline),
                            onPressed: () =>
                                _showHelpSheet(isGroupMode: _groupMode),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),

                      if (_groupMode)
                        _TypeAheadBox(
                          // ‚òÖ NEW: key ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ instance (‡∏Å‡∏±‡∏ô overlay ‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á)
                          key: const ValueKey('inc-group'),
                          // ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
                          controller: _haveGroupCtrl,
                          focusNode: _haveGroupFocus,
                          hint: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏±‡∏Å‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡∏ñ‡∏±‡πà‡∏ß',
                          // ‡πÉ‡∏ä‡πâ suggest ‡∏Å‡∏•‡∏∏‡πà‡∏°
                          suggestionsCallback: ApiService.getGroupSuggestions,
                          onAdd: (g) => _addGroupTo(
                            _haveGroupSet,
                            _notHaveGroupSet,
                            g,
                          ),
                          // ‚òÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏ñ‡πà‡∏≤‡∏¢‚Üímap‚Üí‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
                          showCamera: true,
                          onCamera: _onIncludeGroupCamera,
                        )
                      else
                        _TypeAheadBox(
                          key: const ValueKey('inc-name'), // ‚òÖ NEW
                          // ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
                          controller: _haveCtrl,
                          focusNode: _haveFocus,
                          hint:
                              '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏ö ‡∏´‡∏≠‡∏°‡πÅ‡∏î‡∏á ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®',
                          suggestionsCallback:
                              ApiService.getIngredientSuggestions,
                          onAdd: (n) => _addNameTo(_haveSet, _notHaveSet, n),
                          showCamera: true,
                          onCamera: _onIncludeNameCamera,
                        ),

                      const SizedBox(height: 12),

                      // ‡∏ä‡∏¥‡∏õ‡∏Ç‡∏≠‡∏á "‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö": ‡πÅ‡∏¢‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                      if (_haveSet.isNotEmpty || _haveGroupSet.isNotEmpty)
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            if (_haveSet.isNotEmpty) ...[
                              Text('‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö',
                                  style: textTheme.bodyMedium
                                      ?.copyWith(fontWeight: FontWeight.w600)),
                              const SizedBox(height: 8),
                              _buildChipsWrap(
                                data: _haveSet,
                                onRemove: (n) => _removeFrom(_haveSet, n),
                                color: theme.colorScheme.primary,
                                allergyColor: theme.colorScheme.error,
                                isAllergyAware: true, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Å‡πÅ‡∏û‡πâ
                              ),
                              const SizedBox(height: 12),
                            ],
                            if (_haveGroupSet.isNotEmpty) ...[
                              Text('‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö',
                                  style: textTheme.bodyMedium
                                      ?.copyWith(fontWeight: FontWeight.w600)),
                              const SizedBox(height: 8),
                              _buildChipsWrap(
                                data: _haveGroupSet,
                                onRemove: (n) => _removeFrom(_haveGroupSet, n),
                                color: theme.colorScheme.primary,
                                allergyColor: theme.colorScheme.error,
                                isAllergyAware: false,
                              ),
                            ],
                          ],
                        ),

                      const SizedBox(height: 24),

                      // --- Section: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ---
                      Row(
                        children: [
                          Text('‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ:',
                              style: textTheme.titleMedium
                                  ?.copyWith(fontWeight: FontWeight.bold)),
                          const SizedBox(width: 8),
                          IconButton(
                            tooltip: '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å',
                            icon: const Icon(Icons.help_outline),
                            onPressed: () =>
                                _showHelpSheet(isGroupMode: _groupMode),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),

                      if (_groupMode)
                        _TypeAheadBox(
                          key: const ValueKey('exc-group'), // ‚òÖ NEW
                          controller: _notHaveGroupCtrl,
                          focusNode: _notHaveGroupFocus,
                          hint: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå ‡∏ô‡∏°‡∏ß‡∏±‡∏ß',
                          suggestionsCallback: ApiService.getGroupSuggestions,
                          onAdd: (g) => _addGroupTo(
                            _notHaveGroupSet,
                            _haveGroupSet,
                            g,
                          ),
                          // ‚òÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏ñ‡πà‡∏≤‡∏¢‚Üímap‚Üí‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° (exclude)
                          showCamera: true,
                          onCamera: _onExcludeGroupCamera,
                        )
                      else
                        _TypeAheadBox(
                          key: const ValueKey('exc-name'), // ‚òÖ NEW
                          controller: _notHaveCtrl,
                          focusNode: _notHaveFocus,
                          hint: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏° ‡πÑ‡∏Ç‡πà ‡∏Å‡∏∏‡πâ‡∏á',
                          suggestionsCallback:
                              ApiService.getIngredientSuggestions,
                          onAdd: (n) => _addNameTo(_notHaveSet, _haveSet, n),
                          // ‚òÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö 4 ‡∏ä‡πà‡∏≠‡∏á: ‡πÇ‡∏´‡∏°‡∏î‡∏ä‡∏∑‡πà‡∏≠ (exclude) ‡∏Å‡πá‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢
                          showCamera: true,
                          onCamera: _onExcludeNameCamera,
                        ),

                      const SizedBox(height: 12),

                      // ‡∏ä‡∏¥‡∏õ‡∏Ç‡∏≠‡∏á "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö": ‡πÅ‡∏¢‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                      if (_notHaveSet.isNotEmpty || _notHaveGroupSet.isNotEmpty)
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            if (_notHaveSet.isNotEmpty) ...[
                              Text('‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö',
                                  style: textTheme.bodyMedium
                                      ?.copyWith(fontWeight: FontWeight.w600)),
                              const SizedBox(height: 8),
                              _buildChipsWrap(
                                data: _notHaveSet,
                                onRemove: (n) => _removeFrom(_notHaveSet, n),
                                color: theme.colorScheme.onSurfaceVariant,
                                allergyColor: theme.colorScheme.error,
                                isAllergyAware: false,
                              ),
                              const SizedBox(height: 12),
                            ],
                            if (_notHaveGroupSet.isNotEmpty) ...[
                              Text('‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö',
                                  style: textTheme.bodyMedium
                                      ?.copyWith(fontWeight: FontWeight.w600)),
                              const SizedBox(height: 8),
                              _buildChipsWrap(
                                data: _notHaveGroupSet,
                                onRemove: (n) =>
                                    _removeFrom(_notHaveGroupSet, n),
                                color: theme.colorScheme.onSurfaceVariant,
                                allergyColor: theme.colorScheme.error,
                                isAllergyAware: false,
                              ),
                            ],
                          ],
                        ),

                      const SizedBox(height: 32),

                      // --- Section: Buttons ---
                      Center(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            TextButton.icon(
                              icon: const Icon(Icons.delete_sweep_outlined),
                              label: const Text('‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'),
                              onPressed: _clearAll,
                              style: TextButton.styleFrom(
                                foregroundColor: theme.colorScheme.error,
                              ),
                            ),
                            const SizedBox(height: 16),
                            ElevatedButton(
                              onPressed: _popWithResult,
                              style: ElevatedButton.styleFrom(
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 48, vertical: 16),
                              ),
                              child: Text('‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á ($totalFilters)'),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI Parts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  /// ‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  Widget _buildModeSwitcher(ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Expanded(
              child: SegmentedButton<bool>(
                segments: const [
                  ButtonSegment<bool>(
                    value: false,
                    label: Text('‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö'),
                    icon: Icon(Icons.label_outline),
                  ),
                  ButtonSegment<bool>(
                    value: true,
                    label: Text('‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö'),
                    icon: Icon(Icons.category_outlined),
                  ),
                ],
                selected: {_groupMode},
                onSelectionChanged: (set) {
                  // ‚òÖ NEW: ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î/overlay ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î (‡∏Å‡∏±‡∏ô state ‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á)
                  if (_groupMode != set.first) {
                    _dismissKb();
                    setState(() => _groupMode = set.first);
                  }
                },
                showSelectedIcon: false,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: theme.colorScheme.surfaceContainerHighest
                .withValues(alpha: 0.5),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            children: [
              Icon(
                _groupMode ? Icons.info_outline : Icons.lightbulb_outline,
                size: 16,
                color: theme.colorScheme.onSurfaceVariant,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _groupMode
                      ? '‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Å‡∏ö" ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
                      : '‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Å‡∏ö" ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "‡∏Å‡∏ö" ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurfaceVariant,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏¥‡∏õ‡∏ä‡∏∑‡πà‡∏≠/‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
  Widget _buildChipsWrap({
    required Set<String> data,
    required void Function(String) onRemove,
    required Color color,
    required Color allergyColor,
    required bool isAllergyAware, // true ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∏‡∏î "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"
  }) {
    if (data.isEmpty) return const SizedBox.shrink();

    final cs = Theme.of(context).colorScheme;
    return Wrap(
      alignment: WrapAlignment.start,
      runAlignment: WrapAlignment.start,
      crossAxisAlignment: WrapCrossAlignment.center,
      spacing: 8.0,
      runSpacing: 4.0,
      children: data.map((name) {
        final isAllergy =
            isAllergyAware && _allergySet.any((a) => _norm(a) == _norm(name));

        final chipColor = isAllergy ? allergyColor : color;
        final bg = isAllergy
            ? cs.errorContainer.withValues(alpha: .25)
            : cs.surfaceContainerHighest.withValues(alpha: 0.3);

        final chip = Chip(
          label: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (isAllergy) ...[
                const Icon(Icons.warning_amber_rounded, size: 16),
                const SizedBox(width: 4),
              ],
              Text(name),
            ],
          ),
          labelStyle: TextStyle(color: chipColor, fontWeight: FontWeight.w600),
          side: BorderSide(color: chipColor),
          backgroundColor: bg,
          deleteIcon: const Icon(Icons.close, size: 16),
          onDeleted: isAllergy ? null : () => onRemove(name),
        );

        return Semantics(
          label: isAllergy ? '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÅ‡∏û‡πâ $name' : '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö $name',
          child: Tooltip(
            message:
                isAllergy ? '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ ‚Äî ‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ' : '‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á',
            child: chip,
          ),
        );
      }).toList(),
    );
  }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TypeAhead box (‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á "‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" ‡πÅ‡∏•‡∏∞ "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö") ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * - ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå suggestionsCallback ‡πÅ‡∏•‡∏∞ showCamera
 * - ‡πÄ‡∏°‡∏∑‡πà‡∏≠ submit/‡πÄ‡∏•‡∏∑‡∏≠‡∏Å suggestion ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onAdd ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå controller ‡πÉ‡∏´‡πâ
 * - [NEW] ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö onCamera (‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô mapIngredientsToGroups)
 * - ‚òÖ NEW ‡πÉ‡∏™‡πà super.key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ ValueKey ‡πÅ‡∏¢‡∏Å instance ‡πÉ‡∏ô parent
 */
class _TypeAheadBox extends StatelessWidget {
  const _TypeAheadBox({
    super.key, // ‚òÖ NEW
    required this.controller,
    required this.focusNode,
    required this.hint,
    required this.onAdd,
    required this.suggestionsCallback,
    this.showCamera = false,
    this.onCamera, // [NEW]
  });

  final TextEditingController controller;
  final FocusNode focusNode;
  final String hint;
  final void Function(String) onAdd;

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á ingredient ‡πÅ‡∏•‡∏∞ group)
  final Future<List<String>> Function(String) suggestionsCallback;

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
  final bool showCamera;

  /// [NEW] callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏à‡∏∞ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏Å)
  final Future<void> Function()? onCamera;

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(
          child: TypeAheadField<String>(
            controller: controller,
            suggestionsCallback: suggestionsCallback,
            debounceDuration: const Duration(milliseconds: 300),

            // ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á suggestion - ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏á‡πà‡∏≤‡∏¢
            hideOnUnfocus: true,
            hideOnEmpty: true,
            hideOnLoading: false,
            retainOnLoading: true, // ‡πÄ‡∏Å‡πá‡∏ö suggestions ‡πÑ‡∏ß‡πâ‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î

            // ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å
            builder: (ctx, textController, fieldFocus) => TextField(
              controller: textController,
              focusNode: fieldFocus,
              textInputAction: TextInputAction.done,
              enableSuggestions: true,
              autocorrect: false,
              decoration: InputDecoration(
                hintText: hint,
                suffixIcon: (textController.text.isNotEmpty)
                    ? IconButton(
                        tooltip: '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
                        icon: const Icon(Icons.close),
                        onPressed: () {
                          textController.clear();
                        },
                      )
                    : null,
              ),
              onSubmitted: (value) {
                final v = value.trim();
                if (v.isNotEmpty) {
                  onAdd(v);
                  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                  textController.clear();
                  // ‡∏Ñ‡∏á focus ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                  fieldFocus.requestFocus();
                }
              },
            ),

            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            itemBuilder: (_, s) => ListTile(title: Text(s)),

            // ‚òÖ NEW: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            onSelected: (s) {
              onAdd(s);
              // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå controller ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
              controller.clear();
              focusNode.requestFocus();
            },

            // ‡∏ß‡πà‡∏≤‡∏á
            emptyBuilder: (_) => const Padding(
              padding: EdgeInsets.all(12),
              child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'),
            ),

            // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
            loadingBuilder: (_) => const Padding(
              padding: EdgeInsets.all(12),
              child: SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
            ),

            // error
            errorBuilder: (_, error) => Padding(
              padding: const EdgeInsets.all(12),
              child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error'),
            ),
          ),
        ),
        const SizedBox(width: 8),
        // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏Ñ‡∏£‡∏ö 4 ‡∏ä‡πà‡∏≠‡∏á ‡∏ï‡∏≤‡∏° requirement)
        if (showCamera)
          Semantics(
            button: true,
            label: '‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡πÅ‡∏Å‡∏ô',
            child: IconButton(
              icon: const Icon(Icons.camera_alt_outlined),
              tooltip: '‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡πÅ‡∏Å‡∏ô',
              onPressed: () async {
                // ‚òÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô use_build_context_synchronously: ‡∏à‡∏±‡∏ö messenger ‡∏Å‡πà‡∏≠‡∏ô await
                final messenger = ScaffoldMessenger.of(context);
                if (onCamera != null) {
                  await onCamera!();
                  return;
                }
                // Fallback ‡πÄ‡∏î‡∏¥‡∏°: ‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏Å
                final names = await scanIngredient(context);
                if (names.isNotEmpty) {
                  onAdd(names.first);
                  messenger.hideCurrentSnackBar();
                  messenger.showSnackBar(
                    SnackBar(
                        content: Text('‡πÄ‡∏û‡∏¥‡πà‡∏° "${names.first}" ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô')),
                  );
                }
              },
            ),
          ),
      ],
    );
  }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Small helper widget ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
class _HelpBullet extends StatelessWidget {
  final String text;
  const _HelpBullet(this.text);
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 3),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('‚Ä¢ '),
          Expanded(child: Text(text)),
        ],
      ),
    );
  }
}
