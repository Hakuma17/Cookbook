import 'package:flutter/material.dart';

/// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö ChoiceChipFilter
/// (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® FilterOption ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô search_screen.dart
///  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß import ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡πá‡∏û‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î duplication) ‚òÖA
class FilterOption {
  final String label;
  final String key;
  const FilterOption(this.label, this.key);
}

class ChoiceChipFilter extends StatefulWidget {
  final List<FilterOption> options;
  final int initialIndex;
  final void Function(int index, String key)? onChanged;

  const ChoiceChipFilter({
    super.key,
    required this.options,
    this.initialIndex = 0,
    this.onChanged,
  });

  @override
  State<ChoiceChipFilter> createState() => _ChoiceChipFilterState();
}

class _ChoiceChipFilterState extends State<ChoiceChipFilter> {
  late int _selectedIndex;

  @override
  void initState() {
    super.initState();
    _selectedIndex = widget.initialIndex.clamp(0, widget.options.length - 1);
  }

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å parent sync ‡∏•‡∏á‡∏ä‡∏¥‡∏õ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î
  @override
  void didUpdateWidget(covariant ChoiceChipFilter oldWidget) {
    super.didUpdateWidget(oldWidget);

    // ‡∏ñ‡πâ‡∏≤ parent ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô initialIndex
    if (widget.initialIndex != oldWidget.initialIndex) {
      setState(() {
        _selectedIndex =
            widget.initialIndex.clamp(0, widget.options.length - 1);
      });
    }

    // ‡∏ñ‡πâ‡∏≤ parent ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô options (‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô) ‚òÖB
    if (widget.options.length != oldWidget.options.length &&
        _selectedIndex >= widget.options.length) {
      setState(() => _selectedIndex = 0);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;

    // üî∏ ‡∏ñ‡πâ‡∏≤‡∏ä‡∏¥‡∏õ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡πÜ ‡∏ö‡∏ô‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Row ‚Üí Wrap
    //     ‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ‚òÖC
    //
    // return Wrap(
    //   spacing: 8,
    //   runSpacing: 4,
    //   children: List.generate(widget.options.length, _buildChip),
    // );

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: Row(
        children: List.generate(widget.options.length, _buildChip),
      ),
    );
  }

  /* ---------- helper ---------- */

  Widget _buildChip(int index) {
    final option = widget.options[index];
    final isSelected = index == _selectedIndex;
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;

    return Padding(
      padding: const EdgeInsets.only(right: 8.0),
      child: ChoiceChip(
        label: Text(option.label),
        labelStyle: textTheme.labelLarge?.copyWith(
          color: isSelected
              ? theme.colorScheme.onPrimary
              : theme.colorScheme.onSurfaceVariant,
          fontWeight: FontWeight.bold,
        ),
        selected: isSelected,
        selectedColor: theme.colorScheme.primary,
        backgroundColor: theme.colorScheme.surfaceVariant.withOpacity(0.5),
        shape: const StadiumBorder(),
        onSelected: (selected) {
          if (selected) {
            setState(() => _selectedIndex = index);
            widget.onChanged?.call(index, option.key);
          }
        },
      ),
    );
  }
}
