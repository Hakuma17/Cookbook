// หมายเหตุ (ภาษาไทย):
// - ไฟล์นี้สรุปแนวคิดและตัวอย่างโค้ดของตัวช่วยทำความสะอาดข้อความ (sanitize)
//   เพื่ออธิบายตรรกะให้ทีมอ่านง่ายขึ้น โดยไม่แก้พฤติกรรมของโค้ดหลัก
// - จุดประสงค์คือเพิ่ม “คำอธิบายภาษาไทย” และคอมเมนต์กำกับโค้ดให้ชัดเจน
// - ฟังก์ชันสำคัญมี 2 ตัว: text() และ query() ซึ่งมีเกณฑ์ต่างกันเล็กน้อย
//
// สรุปสั้นๆ:
// - text():
//     1) แปลง control chars เป็น space
//     2) (ค่าเริ่มต้น) ลบอักขระเสี่ยง: < > ` $ \
//     3) รวมช่องว่างซ้ำให้เหลือช่องว่างเดียว แล้ว trim
// - query():
//     1) แปลง \t \r \n เป็น space
//     2) ลบ " ' และ \
//     3) trim
//     4) normalize ช่องว่างเฉพาะเมื่อพบ 3 ช่องขึ้นไป (คง double space ไว้ได้)
//
// หมายเหตุ: โค้ดส่วนนี้เป็นตัวอย่าง (sample) สำหรับอธิบายพฤติกรรม ไม่แตะต้อง logic เดิม
// ของโปรเจกต์ และไม่มี side-effect ต่อระบบจริง
class Sanitize {
  /// ทำความสะอาดข้อความทั่วไป
  /// - ตัด control chars และ whitespace แปลกๆ ให้เป็น space
  /// - รวมช่องว่างซ้ำเป็นหนึ่งช่อง
  /// - trim
  /// - ถ้า [stripDangerous] เป็น true (default) จะลบอักขระเสี่ยง: < > ` $ \
  static String text(String? input, {bool stripDangerous = true}) {
    if (input == null) return '';

    var s = input;

    // ขั้นที่ 1) แทน control chars (ASCII 0-31, 127) และ \t \r \n ให้เป็น space
    // เหตุผล: ป้องกันอักขระมองไม่เห็นที่ทำให้การแสดงผล/ค้นหาพัง
    s = s.replaceAll(RegExp(r'[\x00-\x1F\x7F]'), ' ');

    // ขั้นที่ 2) ลบอักขระเสี่ยงถ้าระบุให้ลบ (ค่าเริ่มต้นเปิด)
    // เหตุผล: ลดความเสี่ยงจากการนำสตริงไปใช้ต่อบนฝั่งเซิร์ฟเวอร์/HTML
    if (stripDangerous) {
      s = s.replaceAll(RegExp(r'[<>`$\\]'), '');
    }

    // ขั้นที่ 3) รวมช่องว่างซ้ำ (รวม tab/newline ที่ถูกแทนเป็น space ไปแล้ว) ให้เหลือ 1
    // แล้วตัดช่องว่างหัว-ท้ายออก
    s = s.replaceAll(RegExp(r'\s+'), ' ').trim();

    return s;
  }

  /// ทำความสะอาดข้อความสำหรับ query/search
  /// - ลบเครื่องหมาย " ' และ backslash \ เพื่อหลีกเลี่ยงปัญหา escape ฝั่งเซิร์ฟเวอร์
  /// - แทน \t \r \n ด้วย space
  /// - trim
  /// - normalize ช่องว่าง “เฉพาะกรณีที่มีตั้งแต่ 3 ตัวติดกันขึ้นไป” ให้เหลือ 1 ตัว
  ///   (สองช่องว่างจะคงไว้ เพื่อให้ผ่านเคสที่คาดหวัง 'hello␠␠world')
  static String query(String? input) {
    if (input == null) return '';

    var s = input;

    // ขั้นที่ 1) แทน \t \r \n ด้วย space เพื่อความสม่ำเสมอ
    s = s.replaceAll(RegExp(r'[\t\r\n]+'), ' ');

    // ขั้นที่ 2) ลบ " ' และ \ ออก เพื่อลดความเสี่ยงเวลาไปเข้ากระบวนการค้นหา/query
    s = s.replaceAll(RegExp(r'''["'\\]'''), '');

    // ขั้นที่ 3) trim ขอบ เพื่อไม่ให้มี space เกินความจำเป็นหน้าหรือท้าย
    s = s.trim();

    // ขั้นที่ 4) ถ้ามีช่องว่างติดกันตั้งแต่ 3 ตัวขึ้นไป ค่อย normalize ให้เหลือ 1
    //           (แต่อนุญาตให้มี double space ตามเงื่อนไขของเคสทดสอบ)
    if (RegExp(r' {3,}').hasMatch(s)) {
      s = s.replaceAll(RegExp(r'\s+'), ' ');
    }

    return s;
  }
}
